name: image-build-verify
on:
  push:
    branches:
      - 'not-using-this-workflow'
#      - '*'
#      - '!main'
#  pull_request:
#    types: [opened, reopened, ready_for_review, synchronize]
  workflow_dispatch:

jobs:

  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: set-matrix
        run: |
          matrixStringifiedObject=$( ./get-image-matrix.php )
          echo "matrix=${matrixStringifiedObject}" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.gh-image-name }}:${{ matrix.version-full }}
    runs-on: ubuntu-latest
    needs: matrix
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    permissions:
      # actions: read|write|none
      actions: none
      # checks: read|write|none
      checks: none
      # contents: read|write|none
      contents: write
      # deployments: read|write|none
      deployments: none
      # id-token: read|write|none
      id-token: none
      # issues: read|write|none
      issues: none
      # discussions: read|write|none
      discussions: none
      # packages: read|write|none
      packages: write
      # pages: read|write|none
      pages: none
      # pull-requests: read|write|none
      pull-requests: none
      # repository-projects: read|write|none
      repository-projects: read
      # security-events: read|write|none
      security-events: none
      # statuses: read|write|none
      statuses: none

    # Ensure that all matrix flavours are executed, even if one constellation fails. Thus avoiding cancelling
    # other variants from being finished or started.
    continue-on-error: true

    strategy:
      # This prevents cancellation of matrix job runs, if one/two already failed and let the
      # remaining matrix jobs be executed anyway.
      fail-fast: false

      # Matrix is build from images.json file.
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}          

      - name: Validate retrieved versions
        run: |
          [[ "${{ matrix.version-full }}" == "" ]] && exit 1
          [[ "${{ matrix.version-short }}" == "" ]] && exit 1
          exit 0

      - name: Check GitHub container registry for ${{ matrix.gh-image-name }}:${{ matrix.version-full }}
        id: imageFullVersionState
        run: |
          manifestInfo=$( docker buildx imagetools inspect ${{ matrix.gh-image-name }}:${{ matrix.version-full }} --raw 2>/dev/null | jq -r '."manifests"[] | ."platform"."os" + "/" + ."platform"."architecture"' )
          manifestExitCode="$?"
          manifestResult=""
          [[ "$?" -ne 0 ]] && manifestResult="missing"
          [[ "${manifestInfo}" == *"${{ matrix.gh-image-name }}:${{ matrix.version-full }}: not found"* ]] && manifestResult="missing"
          [[ -n "${manifestInfo}" ]] && [[ "${manifestInfo}" == *"linux/amd64"* ]] && manifestResult="found"
          [[ -n "${manifestInfo}" ]] && [[ "${manifestInfo}" == *"linux/arm64"* ]] && manifestResult="found"
          [[ -z "${manifestResult}" ]] && manifestResult="missing"
          echo "IMAGE_FULL_VERSION_STATE=${manifestResult}" >> $GITHUB_OUTPUT

      - name: Validate if image should be build ${{ steps.imageFullVersionState.outputs.IMAGE_FULL_VERSION_STATE }}
        id: imageShouldBeBuild
        run: |
          echo "VALUE.: ${{ steps.imageFullVersionState.outputs.IMAGE_FULL_VERSION_STATE }}" 
          shouldBeBuild=3
          [[ "${{ steps.imageFullVersionState.outputs.IMAGE_FULL_VERSION_STATE }}" == "found" ]] && shouldBeBuild=0
          [[ "${{ steps.imageFullVersionState.outputs.IMAGE_FULL_VERSION_STATE }}" == "missing" ]] && shouldBeBuild=1
          echo "RESULT: ${shouldBeBuild}"
          echo "IMAGE_SHOULD_BE_BUILD=${shouldBeBuild}" >> $GITHUB_OUTPUT

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        if: steps.imageShouldBeBuild.outputs.IMAGE_SHOULD_BE_BUILD == 1
        with:
          context: ${{ matrix.context }}
          push: false
          load: false
          provenance: false
          platforms: ${{ matrix.platforms }}
          build-args: |
            IMAGE_NAME=${{ matrix.gh-image-name }}
            IMAGE_VERSION=${{ matrix.version-full }}          
          tags: ${{ matrix.gh-image-name }}:test

      - name: Display fetching image version failed
        if: steps.imageShouldBeBuild.outputs.IMAGE_SHOULD_BE_BUILD == 3
        run: |
          echo " -------------------------------------------------------------------------"
          echo "  >> [${{ steps.imageShouldBeBuild.outputs.IMAGE_SHOULD_BE_BUILD }}] Fetching image version failed for image"
          echo "     \"${{ matrix.gh-image-name }}:${{ env.IMAGE_VERSION_FULL }}\""
          echo " -------------------------------------------------------------------------"
          echo ""
          exit           

      - name: Image version should be raised - tags already exists
        if: steps.imageShouldBeBuild.outputs.IMAGE_SHOULD_BE_BUILD == 0
        run: |
          echo " -------------------------------------------------------------------------"
          echo ">> [${{ steps.imageShouldBeBuild.outputs.IMAGE_SHOULD_BE_BUILD }}] Image \"${{ matrix.gh-image-name }}:${{ env.IMAGE_VERSION_FULL }}\" already exists."
          echo "   Use:"
          echo ""
          echo "     ./image-version ${{ matrix.lookup-name }} (--patchlevel|--minor)"
          echo ""
          echo "   and then push the committed change again."
          echo " -------------------------------------------------------------------------"
          echo ""
          
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            exit 1;
          fi